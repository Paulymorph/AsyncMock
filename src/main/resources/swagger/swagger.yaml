openapi: 3.0.0
info:
  title: AsyncMock management API
  description: API for mocks management.
  version: 0.1.0

paths:
  /mock:
    post:
      summary: Creates a mock.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MockConfiguration'
      responses:
        201:
          description: The mock was created successfully.
  /mock/{port}:
    parameters:
      - in: path
        name: port
        schema:
          type: integer
        example: 5000
        required: true
        description: Port of the mock
    get:
      summary: Gets current mock at the port.
      responses:
        200:
          description: Successfully got the mock on the specified port.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockConfiguration'
    delete:
      summary: Remove a mock at the port.
      responses:
        200:
          description: Successfully removed the mock on the specified port.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockConfiguration'
components:
  schemas:
    MockConfiguration:
      description: Mock configuration
      type: object
      properties:
        port:
          type: number
          example: 5000
        stubs:
          type: array
          items:
            $ref: '#/components/schemas/Stub'
    Stub:
      type: object
      properties:
        predicates:
          description: Predicates to match the incoming HTTP requests to the server
          type: array
          items:
            $ref: '#/components/schemas/HttpPredicate'
        responses:
          type: array
          items:
            $ref: '#/components/schemas/Response'
    HttpPredicate:
      type: object
      anyOf:
        - $ref: '#/components/schemas/HttpEquals'
        - $ref: '#/components/schemas/HttpContains'
        - $ref: '#/components/schemas/HttpStartsWith'
        - $ref: '#/components/schemas/HttpAnd'
        - $ref: '#/components/schemas/HttpOr'
      example:
        equals:
          method: get
        startsWith:
          path:
            "foo"
    HttpEquals:
      type: object
      required: [equals]
      properties:
        equals:
          $ref: '#/components/schemas/RequestExpectation'
    HttpContains:
      type: object
      required: [contains]
      properties:
        contains:
          $ref: '#/components/schemas/RequestExpectation'
    HttpStartsWith:
      type: object
      required: [startsWith]
      properties:
        startsWith:
          $ref: '#/components/schemas/RequestExpectation'
    HttpAnd:
      type:
        object
      required: [and]
      properties:
        and:
          type:
            array
          items:
            $ref: '#/components/schemas/HttpPredicate'
    HttpOr:
      type:
        object
      required: [or]
      properties:
        or:
          type:
            array
          items:
            $ref: '#/components/schemas/HttpPredicate'
    RequestExpectation:
      type: object
      anyOf:
        - $ref: '#/components/schemas/BodyExpectation'
        - $ref: '#/components/schemas/PathExpectation'
        - $ref: '#/components/schemas/MethodExpectation'
        - $ref: '#/components/schemas/QueryExpectation'
      example:
        body:
          key: value
        path: path/path
        method: get
        query:
          a: b
    BodyExpectation:
      type: object
      required: [body]
      properties:
        body:
          $ref: '#/components/schemas/JsonLike'
    PathExpectation:
      type: object
      required: [path]
      properties:
        body:
          type: string
    MethodExpectation:
      type: object
      required: [method]
      properties:
        method:
          type: string
          enum:
            - get
            - post
            - put
            - delete
            - head
            - patch
            - trace
      example:
        method: get
    QueryExpectation:
      type: object
    Response:
      $ref: '#/components/schemas/EventsResponse'
    EventsResponse:
      oneOf:
        - $ref: '#/components/schemas/SseEventsResponse'
        - $ref: '#/components/schemas/WsEventsResponse'
      properties:
        type:
          type: string
          enum: [sse, websocket]
      discriminator:
        propertyName: type
        mapping:
          sse: '#/components/schemas/SseEventsResponse'
          websocket: '#/components/schemas/WsEventsResponse'
    SseEventsResponse:
      type: object
      properties:
        type:
          type: string
          enum: [sse]
        events:
          type: array
          items:
            $ref: '#/components/schemas/SseEvent'
        timeout:
          $ref: '#/components/schemas/Duration'
    JsonLike:
      oneOf:
        - type: object
        - type: string
        - type: number
      example:
        key: value
    EventLike:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/JsonLike'
        delay:
          $ref: '#/components/schemas/Duration'
      required: [data]
    Duration:
      type: string
      pattern: '\d+ (millis?|seconds?|minutes?)'
      example: '2 seconds'
    SseEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventLike'
      required: [data]
      properties:
        id:
          type: string
        eventType:
          type: string
    WsEventsResponse:
      type: object
      properties:
        type:
          type: string
          enum: [websocket]
        events:
          type: array
          items:
            $ref: '#/components/schemas/WsEvent'
        reactions:
          type:
            array
          items:
            $ref: '#/components/schemas/WsReaction'
        timeout:
          $ref: '#/components/schemas/Duration'
    WsEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventLike'
      required: [data]
    WsReaction:
      type:
        object
      properties:
        predicates:
          type: array
          items:
            $ref: '#/components/schemas/WsEventPredicate'
        reaction:
          type: array
          items:
            $ref: '#/components/schemas/WsEvent'
    WsEventPredicate:
      type: object
      anyOf:
        - $ref: '#/components/schemas/WsEquals'
        - $ref: '#/components/schemas/WsContains'
        - $ref: '#/components/schemas/WsStartsWith'
        - $ref: '#/components/schemas/WsAnd'
        - $ref: '#/components/schemas/WsOr'
    WsEquals:
      type: object
      required: [equals]
      properties:
        equals:
          $ref: '#/components/schemas/JsonLike'
    WsContains:
      type: object
      required: [contains]
      properties:
        contains:
          $ref: '#/components/schemas/JsonLike'
    WsStartsWith:
      type: object
      required: [startsWith]
      properties:
        startsWith:
          $ref: '#/components/schemas/JsonLike'
    WsAnd:
      type: object
      required: [and]
      properties:
        and:
          type: array
          items:
            $ref: '#/components/schemas/WsEventPredicate'
    WsOr:
      type: object
      required: [or]
      properties:
        or:
          type: array
          items:
            $ref: '#/components/schemas/WsEventPredicate'
